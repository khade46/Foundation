//LinkedList insertion and deletion
import java.util.*;
class LLOps{
    Node head;
    class Node{
        int data;
        Node next;
        Node(int data){
            this.data=data;
            this.next=null;
        }
    }
    void addFirst(int data){
        Node newNode= new Node(data);
        newNode.next=head;
        head=newNode;
    }
    void addLast(int data){
        Node newNode=new Node(data);
        if(head==null){
            head=newNode;
            return;
        }
        Node temp=head;
        while(temp.next!=null){
            temp=temp.next;
        }
        temp.next=newNode;
    }
    void addMid(int data,int pos){
        Node newNode=new Node(data);
        if(head==null){
            head=newNode;
            return;
        }
        Node temp=head;
        int count=0;
        while(temp!=null){
            temp=temp.next;
            count++;
        }
        System.out.println("count = "+count);
        if(pos>count||pos<=0){
            System.out.println("enter a valid position i.e (0<position<=count)");
        } else{
            Node temp1=head;
            Node temp2=head;

            for(int i=1;i<pos-1;i++){
                if(temp1.next!=null && temp2.next!=null)
                    temp1=temp1.next;
                temp2=temp2.next;
            }
            temp2 = temp1.next;
            temp1.next=newNode;
            newNode.next=temp2;
        }

    }
    void delFirst(){
        if(head==null){
            System.out.println("empty list");
            return;
        }
        head=head.next;
    }
    void delLast(){
        if(head==null){
            System.out.println("list is empty");
            return;
        }
        if(head.next==null){
            head=null;
            return;
        }
        Node temp1=head;
        Node temp2=head.next;
        while(temp2.next!=null){
            temp2=temp2.next;
            temp1=temp1.next;
        }
        temp1.next=null;
    }
    void printList(){
        if(head==null){
            System.out.println("list is empty");
            return;
        }
        Node temp=head;
        while(temp!=null){
            System.out.println(temp.data+" ");
            temp=temp.next;

        }
    }
    public static void main(String args[]){
        LLOps list=new LLOps();
        list.addFirst(20);
        list.addFirst(10);
        list.addLast(40);
        list.printList();
        list.addMid(30,3);
        list.printList();
        list.delFirst();
        list.printList();
        list.delLast();
        list.printList();
    }

}

//Stack push() pop() and display()

class Stack{
    int max=5;
    int top=-1;
    int[] stack=new int[max];
    void push(int data){
        if(top==max){
            System.out.println("overflow");
        }
        else{
            top++;
            stack[top]=data;
        }

    }
    void pop(int data){
        if(top==-1){
            System.out.println("underflow");
        }
        else{
            System.out.println("deleted item -> "+stack[top]);
            top--;
        }

    }
    void display(){
        if(top==-1){
            System.out.println("underflow");
        }
        else{
            for(int i=0;i<=top;i++){
                System.out.println(stack[i]);
            }
        }
    }
    public static void main(String args[]){
        Stack st=new Stack();
        st.display();
        st.push(10);
        st.push(20);
        st.push(30);
        st.push(40);
        st.display();
        st.pop(40);
        st.display();

    }
}

//Bubble sort

import java.util.*;
class Bubblesort{
    static void printArr(int arr[]){
        for(int i=0;i< arr.length;i++){
            System.out.println(arr[i]);
        }
    }
    public static void main(String args[]){
        int arr[]={-5,30,0,11,-2};
        for(int i=0;i<arr.length-1;i++){
            for(int j=0;j<arr.length-i-1;j++){
                if(arr[j]>arr[j+1]){
                    int temp=arr[j];
                    arr[j]=arr[j+1];
                    arr[j+1]=temp;
                }
            }
        }
        printArr(arr);
    }
}

